/* soapC.cpp
   Generated by gSOAP 2.8.104 for lacuisine.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.104 2020-07-24 12:44:25 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_ns2__SessionEnum:
		return soap_in_ns2__SessionEnum(soap, tag, NULL, "ns2:SessionEnum");
	case SOAP_TYPE_ns2__ProfileEnum:
		return soap_in_ns2__ProfileEnum(soap, tag, NULL, "ns2:ProfileEnum");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_ns2__UserDataSession:
		return soap_in_ns2__UserDataSession(soap, tag, NULL, "ns2:UserDataSession");
	case SOAP_TYPE_ns1__CloseUserSessionResponseType:
		return soap_in_ns1__CloseUserSessionResponseType(soap, tag, NULL, "ns1:CloseUserSessionResponseType");
	case SOAP_TYPE_ns1__CloseUserSessionRequestType:
		return soap_in_ns1__CloseUserSessionRequestType(soap, tag, NULL, "ns1:CloseUserSessionRequestType");
	case SOAP_TYPE_ns1__OpenUserSessionResponseType:
		return soap_in_ns1__OpenUserSessionResponseType(soap, tag, NULL, "ns1:OpenUserSessionResponseType");
	case SOAP_TYPE_ns1__OpenUserSessionRequestType:
		return soap_in_ns1__OpenUserSessionRequestType(soap, tag, NULL, "ns1:OpenUserSessionRequestType");
	case SOAP_TYPE_PointerTons1__CloseUserSessionRequestType:
		return soap_in_PointerTons1__CloseUserSessionRequestType(soap, tag, NULL, "ns1:CloseUserSessionRequestType");
	case SOAP_TYPE_PointerTons1__OpenUserSessionRequestType:
		return soap_in_PointerTons1__OpenUserSessionRequestType(soap, tag, NULL, "ns1:OpenUserSessionRequestType");
	case SOAP_TYPE_PointerTons2__UserDataSession:
		return soap_in_PointerTons2__UserDataSession(soap, tag, NULL, "ns2:UserDataSession");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UserDataSession"))
		{	*type = SOAP_TYPE_ns2__UserDataSession;
			return soap_in_ns2__UserDataSession(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseUserSessionResponseType"))
		{	*type = SOAP_TYPE_ns1__CloseUserSessionResponseType;
			return soap_in_ns1__CloseUserSessionResponseType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseUserSessionRequestType"))
		{	*type = SOAP_TYPE_ns1__CloseUserSessionRequestType;
			return soap_in_ns1__CloseUserSessionRequestType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenUserSessionResponseType"))
		{	*type = SOAP_TYPE_ns1__OpenUserSessionResponseType;
			return soap_in_ns1__OpenUserSessionResponseType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenUserSessionRequestType"))
		{	*type = SOAP_TYPE_ns1__OpenUserSessionRequestType;
			return soap_in_ns1__OpenUserSessionRequestType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SessionEnum"))
		{	*type = SOAP_TYPE_ns2__SessionEnum;
			return soap_in_ns2__SessionEnum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ProfileEnum"))
		{	*type = SOAP_TYPE_ns2__ProfileEnum;
			return soap_in_ns2__ProfileEnum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns2__SessionEnum:
		return soap_out_ns2__SessionEnum(soap, tag, id, (const enum ns2__SessionEnum *)ptr, "ns2:SessionEnum");
	case SOAP_TYPE_ns2__ProfileEnum:
		return soap_out_ns2__ProfileEnum(soap, tag, id, (const enum ns2__ProfileEnum *)ptr, "ns2:ProfileEnum");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns2__UserDataSession:
		return ((ns2__UserDataSession *)ptr)->soap_out(soap, tag, id, "ns2:UserDataSession");
	case SOAP_TYPE_ns1__CloseUserSessionResponseType:
		return ((ns1__CloseUserSessionResponseType *)ptr)->soap_out(soap, tag, id, "ns1:CloseUserSessionResponseType");
	case SOAP_TYPE_ns1__CloseUserSessionRequestType:
		return ((ns1__CloseUserSessionRequestType *)ptr)->soap_out(soap, tag, id, "ns1:CloseUserSessionRequestType");
	case SOAP_TYPE_ns1__OpenUserSessionResponseType:
		return ((ns1__OpenUserSessionResponseType *)ptr)->soap_out(soap, tag, id, "ns1:OpenUserSessionResponseType");
	case SOAP_TYPE_ns1__OpenUserSessionRequestType:
		return ((ns1__OpenUserSessionRequestType *)ptr)->soap_out(soap, tag, id, "ns1:OpenUserSessionRequestType");
	case SOAP_TYPE_PointerTons1__CloseUserSessionRequestType:
		return soap_out_PointerTons1__CloseUserSessionRequestType(soap, tag, id, (ns1__CloseUserSessionRequestType *const*)ptr, "ns1:CloseUserSessionRequestType");
	case SOAP_TYPE_PointerTons1__OpenUserSessionRequestType:
		return soap_out_PointerTons1__OpenUserSessionRequestType(soap, tag, id, (ns1__OpenUserSessionRequestType *const*)ptr, "ns1:OpenUserSessionRequestType");
	case SOAP_TYPE_PointerTons2__UserDataSession:
		return soap_out_PointerTons2__UserDataSession(soap, tag, id, (ns2__UserDataSession *const*)ptr, "ns2:UserDataSession");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in ./clientHost/soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__UserDataSession:
		((ns2__UserDataSession *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__CloseUserSessionResponseType:
		((ns1__CloseUserSessionResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__CloseUserSessionRequestType:
		((ns1__CloseUserSessionRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__OpenUserSessionResponseType:
		((ns1__OpenUserSessionResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__OpenUserSessionRequestType:
		((ns1__OpenUserSessionRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__CloseUserSession:
		soap_serialize___ns1__CloseUserSession(soap, (const struct __ns1__CloseUserSession *)ptr);
		break;
	case SOAP_TYPE___ns1__OpenUserSession:
		soap_serialize___ns1__OpenUserSession(soap, (const struct __ns1__OpenUserSession *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__CloseUserSessionRequestType:
		soap_serialize_PointerTons1__CloseUserSessionRequestType(soap, (ns1__CloseUserSessionRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__OpenUserSessionRequestType:
		soap_serialize_PointerTons1__OpenUserSessionRequestType(soap, (ns1__OpenUserSessionRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__UserDataSession:
		soap_serialize_PointerTons2__UserDataSession(soap, (ns2__UserDataSession *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__OpenUserSessionRequestType:
		return (void*)soap_instantiate_ns1__OpenUserSessionRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__OpenUserSessionResponseType:
		return (void*)soap_instantiate_ns1__OpenUserSessionResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__CloseUserSessionRequestType:
		return (void*)soap_instantiate_ns1__CloseUserSessionRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__CloseUserSessionResponseType:
		return (void*)soap_instantiate_ns1__CloseUserSessionResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__UserDataSession:
		return (void*)soap_instantiate_ns2__UserDataSession(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OpenUserSession:
		return (void*)soap_instantiate___ns1__OpenUserSession(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CloseUserSession:
		return (void*)soap_instantiate___ns1__CloseUserSession(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns1__OpenUserSessionRequestType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__OpenUserSessionRequestType*>(p->ptr), ns1__OpenUserSessionRequestType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__OpenUserSessionRequestType*>(p->ptr), ns1__OpenUserSessionRequestType);
		break;
	case SOAP_TYPE_ns1__OpenUserSessionResponseType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__OpenUserSessionResponseType*>(p->ptr), ns1__OpenUserSessionResponseType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__OpenUserSessionResponseType*>(p->ptr), ns1__OpenUserSessionResponseType);
		break;
	case SOAP_TYPE_ns1__CloseUserSessionRequestType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__CloseUserSessionRequestType*>(p->ptr), ns1__CloseUserSessionRequestType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__CloseUserSessionRequestType*>(p->ptr), ns1__CloseUserSessionRequestType);
		break;
	case SOAP_TYPE_ns1__CloseUserSessionResponseType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__CloseUserSessionResponseType*>(p->ptr), ns1__CloseUserSessionResponseType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__CloseUserSessionResponseType*>(p->ptr), ns1__CloseUserSessionResponseType);
		break;
	case SOAP_TYPE_ns2__UserDataSession:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns2__UserDataSession*>(p->ptr), ns2__UserDataSession);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns2__UserDataSession*>(p->ptr), ns2__UserDataSession);
		break;
	case SOAP_TYPE___ns1__OpenUserSession:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__OpenUserSession*>(p->ptr), struct __ns1__OpenUserSession);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__OpenUserSession*>(p->ptr), struct __ns1__OpenUserSession);
		break;
	case SOAP_TYPE___ns1__CloseUserSession:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__CloseUserSession*>(p->ptr), struct __ns1__CloseUserSession);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__CloseUserSession*>(p->ptr), struct __ns1__CloseUserSession);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__OpenUserSessionRequestType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__OpenUserSessionRequestType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__OpenUserSessionRequestType*)p = *(ns1__OpenUserSessionRequestType*)q;
		break;
	case SOAP_TYPE_ns1__OpenUserSessionResponseType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__OpenUserSessionResponseType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__OpenUserSessionResponseType*)p = *(ns1__OpenUserSessionResponseType*)q;
		break;
	case SOAP_TYPE_ns1__CloseUserSessionRequestType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__CloseUserSessionRequestType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__CloseUserSessionRequestType*)p = *(ns1__CloseUserSessionRequestType*)q;
		break;
	case SOAP_TYPE_ns1__CloseUserSessionResponseType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__CloseUserSessionResponseType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__CloseUserSessionResponseType*)p = *(ns1__CloseUserSessionResponseType*)q;
		break;
	case SOAP_TYPE_ns2__UserDataSession:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__UserDataSession type=%d location=%p object=%p\n", t, p, q));
		*(ns2__UserDataSession*)p = *(ns2__UserDataSession*)q;
		break;
	case SOAP_TYPE___ns1__OpenUserSession:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__OpenUserSession type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__OpenUserSession*)p = *(struct __ns1__OpenUserSession*)q;
		break;
	case SOAP_TYPE___ns1__CloseUserSession:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__CloseUserSession type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__CloseUserSession*)p = *(struct __ns1__CloseUserSession*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns2__SessionEnum[] =
{	{ (LONG64)ns2__SessionEnum__SessionOk, "SessionOk" },
	{ (LONG64)ns2__SessionEnum__SessionIsOpened, "SessionIsOpened" },
	{ (LONG64)ns2__SessionEnum__SessionCannotBeOpened, "SessionCannotBeOpened" },
	{ (LONG64)ns2__SessionEnum__SessionIsSuccessfullyClosed, "SessionIsSuccessfullyClosed" },
	{ (LONG64)ns2__SessionEnum__SessionUnauthorizedUser, "SessionUnauthorizedUser" },
	{ (LONG64)ns2__SessionEnum__SessionNotFound, "SessionNotFound" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__SessionEnum2s(struct soap *soap, enum ns2__SessionEnum n)
{
	const char *s = soap_code_str(soap_codes_ns2__SessionEnum, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SessionEnum(struct soap *soap, const char *tag, int id, const enum ns2__SessionEnum *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SessionEnum), type) || soap_send(soap, soap_ns2__SessionEnum2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__SessionEnum(struct soap *soap, const char *s, enum ns2__SessionEnum *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__SessionEnum, s);
	if (map)
		*a = (enum ns2__SessionEnum)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 5)
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__SessionEnum)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__SessionEnum * SOAP_FMAC4 soap_in_ns2__SessionEnum(struct soap *soap, const char *tag, enum ns2__SessionEnum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__SessionEnum*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SessionEnum, sizeof(enum ns2__SessionEnum), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns2__SessionEnum(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns2__SessionEnum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SessionEnum, SOAP_TYPE_ns2__SessionEnum, sizeof(enum ns2__SessionEnum), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns2__SessionEnum * SOAP_FMAC4 soap_new_ns2__SessionEnum(struct soap *soap, int n)
{
	enum ns2__SessionEnum *a = static_cast<enum ns2__SessionEnum *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns2__SessionEnum)));
	for (enum ns2__SessionEnum *p = a; p && n--; ++p)
		soap_default_ns2__SessionEnum(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SessionEnum(struct soap *soap, const enum ns2__SessionEnum *a, const char *tag, const char *type)
{
	if (soap_out_ns2__SessionEnum(soap, tag ? tag : "ns2:SessionEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__SessionEnum * SOAP_FMAC4 soap_get_ns2__SessionEnum(struct soap *soap, enum ns2__SessionEnum *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SessionEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns2__ProfileEnum[] =
{	{ (LONG64)ns2__ProfileEnum__ProfileMaster, "ProfileMaster" },
	{ (LONG64)ns2__ProfileEnum__ProfileAdministrador, "ProfileAdministrador" },
	{ (LONG64)ns2__ProfileEnum__ProfileCheckout, "ProfileCheckout" },
	{ (LONG64)ns2__ProfileEnum__ProfileKitchen, "ProfileKitchen" },
	{ (LONG64)ns2__ProfileEnum__ProfileUser, "ProfileUser" },
	{ (LONG64)ns2__ProfileEnum__ProfileUnknown, "ProfileUnknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ProfileEnum2s(struct soap *soap, enum ns2__ProfileEnum n)
{
	const char *s = soap_code_str(soap_codes_ns2__ProfileEnum, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProfileEnum(struct soap *soap, const char *tag, int id, const enum ns2__ProfileEnum *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ProfileEnum), type) || soap_send(soap, soap_ns2__ProfileEnum2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ProfileEnum(struct soap *soap, const char *s, enum ns2__ProfileEnum *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__ProfileEnum, s);
	if (map)
		*a = (enum ns2__ProfileEnum)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 5)
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__ProfileEnum)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__ProfileEnum * SOAP_FMAC4 soap_in_ns2__ProfileEnum(struct soap *soap, const char *tag, enum ns2__ProfileEnum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__ProfileEnum*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ProfileEnum, sizeof(enum ns2__ProfileEnum), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns2__ProfileEnum(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns2__ProfileEnum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ProfileEnum, SOAP_TYPE_ns2__ProfileEnum, sizeof(enum ns2__ProfileEnum), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns2__ProfileEnum * SOAP_FMAC4 soap_new_ns2__ProfileEnum(struct soap *soap, int n)
{
	enum ns2__ProfileEnum *a = static_cast<enum ns2__ProfileEnum *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns2__ProfileEnum)));
	for (enum ns2__ProfileEnum *p = a; p && n--; ++p)
		soap_default_ns2__ProfileEnum(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ProfileEnum(struct soap *soap, const enum ns2__ProfileEnum *a, const char *tag, const char *type)
{
	if (soap_out_ns2__ProfileEnum(soap, tag ? tag : "ns2:ProfileEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__ProfileEnum * SOAP_FMAC4 soap_get_ns2__ProfileEnum(struct soap *soap, enum ns2__ProfileEnum *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ProfileEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__UserDataSession::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns2__UserDataSession::fullName);
	soap_default_int(soap, &this->ns2__UserDataSession::challenge);
	soap_default_ns2__ProfileEnum(soap, &this->ns2__UserDataSession::profileType);
}

void ns2__UserDataSession::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->ns2__UserDataSession::fullName);
#endif
}

int ns2__UserDataSession::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__UserDataSession(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UserDataSession(struct soap *soap, const char *tag, int id, const ns2__UserDataSession *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__UserDataSession), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns2:fullName", -1, &a->ns2__UserDataSession::fullName, ""))
		return soap->error;
	if (soap_out_int(soap, "ns2:challenge", -1, &a->ns2__UserDataSession::challenge, ""))
		return soap->error;
	if (soap_out_ns2__ProfileEnum(soap, "ns2:profileType", -1, &a->ns2__UserDataSession::profileType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__UserDataSession::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns2__UserDataSession(soap, tag, this, type);
}

SOAP_FMAC3 ns2__UserDataSession * SOAP_FMAC4 soap_in_ns2__UserDataSession(struct soap *soap, const char *tag, ns2__UserDataSession *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__UserDataSession*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__UserDataSession, sizeof(ns2__UserDataSession), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__UserDataSession)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns2__UserDataSession *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_fullName1 = 1;
	size_t soap_flag_challenge1 = 1;
	size_t soap_flag_profileType1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fullName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:fullName", &a->ns2__UserDataSession::fullName, "xsd:string"))
				{	soap_flag_fullName1--;
					continue;
				}
			}
			if (soap_flag_challenge1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "ns2:challenge", &a->ns2__UserDataSession::challenge, "xsd:int"))
				{	soap_flag_challenge1--;
					continue;
				}
			}
			if (soap_flag_profileType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns2__ProfileEnum(soap, "ns2:profileType", &a->ns2__UserDataSession::profileType, "ns2:ProfileEnum"))
				{	soap_flag_profileType1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fullName1 > 0 || soap_flag_challenge1 > 0 || soap_flag_profileType1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns2__UserDataSession *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__UserDataSession, SOAP_TYPE_ns2__UserDataSession, sizeof(ns2__UserDataSession), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns2__UserDataSession * SOAP_FMAC2 soap_instantiate_ns2__UserDataSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__UserDataSession(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__UserDataSession *p;
	size_t k = sizeof(ns2__UserDataSession);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__UserDataSession, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns2__UserDataSession);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns2__UserDataSession, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__UserDataSession location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns2__UserDataSession::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__UserDataSession(soap, tag ? tag : "ns2:UserDataSession", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__UserDataSession::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__UserDataSession(soap, this, tag, type);
}

SOAP_FMAC3 ns2__UserDataSession * SOAP_FMAC4 soap_get_ns2__UserDataSession(struct soap *soap, ns2__UserDataSession *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__UserDataSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__CloseUserSessionResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns2__SessionEnum(soap, &this->ns1__CloseUserSessionResponseType::response);
	soap_default_bool(soap, &this->ns1__CloseUserSessionResponseType::success);
}

void ns1__CloseUserSessionResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__CloseUserSessionResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__CloseUserSessionResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CloseUserSessionResponseType(struct soap *soap, const char *tag, int id, const ns1__CloseUserSessionResponseType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__CloseUserSessionResponseType), type))
		return soap->error;
	if (soap_out_ns2__SessionEnum(soap, "response", -1, &a->ns1__CloseUserSessionResponseType::response, ""))
		return soap->error;
	if (soap_out_bool(soap, "success", -1, &a->ns1__CloseUserSessionResponseType::success, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__CloseUserSessionResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__CloseUserSessionResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__CloseUserSessionResponseType * SOAP_FMAC4 soap_in_ns1__CloseUserSessionResponseType(struct soap *soap, const char *tag, ns1__CloseUserSessionResponseType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__CloseUserSessionResponseType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__CloseUserSessionResponseType, sizeof(ns1__CloseUserSessionResponseType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__CloseUserSessionResponseType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__CloseUserSessionResponseType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_response1 = 1;
	size_t soap_flag_success1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns2__SessionEnum(soap, "response", &a->ns1__CloseUserSessionResponseType::response, "ns2:SessionEnum"))
				{	soap_flag_response1--;
					continue;
				}
			}
			if (soap_flag_success1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "success", &a->ns1__CloseUserSessionResponseType::success, "xsd:boolean"))
				{	soap_flag_success1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response1 > 0 || soap_flag_success1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__CloseUserSessionResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__CloseUserSessionResponseType, SOAP_TYPE_ns1__CloseUserSessionResponseType, sizeof(ns1__CloseUserSessionResponseType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__CloseUserSessionResponseType * SOAP_FMAC2 soap_instantiate_ns1__CloseUserSessionResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__CloseUserSessionResponseType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__CloseUserSessionResponseType *p;
	size_t k = sizeof(ns1__CloseUserSessionResponseType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__CloseUserSessionResponseType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__CloseUserSessionResponseType);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__CloseUserSessionResponseType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__CloseUserSessionResponseType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__CloseUserSessionResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__CloseUserSessionResponseType(soap, tag ? tag : "ns1:CloseUserSessionResponseType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__CloseUserSessionResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__CloseUserSessionResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__CloseUserSessionResponseType * SOAP_FMAC4 soap_get_ns1__CloseUserSessionResponseType(struct soap *soap, ns1__CloseUserSessionResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__CloseUserSessionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__CloseUserSessionRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__CloseUserSessionRequestType::userName);
	soap_default_std__string(soap, &this->ns1__CloseUserSessionRequestType::passwd);
	soap_default_std__string(soap, &this->ns1__CloseUserSessionRequestType::deviceId);
}

void ns1__CloseUserSessionRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->ns1__CloseUserSessionRequestType::userName);
	soap_serialize_std__string(soap, &this->ns1__CloseUserSessionRequestType::passwd);
	soap_serialize_std__string(soap, &this->ns1__CloseUserSessionRequestType::deviceId);
#endif
}

int ns1__CloseUserSessionRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__CloseUserSessionRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CloseUserSessionRequestType(struct soap *soap, const char *tag, int id, const ns1__CloseUserSessionRequestType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__CloseUserSessionRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "userName", -1, &a->ns1__CloseUserSessionRequestType::userName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "passwd", -1, &a->ns1__CloseUserSessionRequestType::passwd, ""))
		return soap->error;
	if (soap_out_std__string(soap, "deviceId", -1, &a->ns1__CloseUserSessionRequestType::deviceId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__CloseUserSessionRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__CloseUserSessionRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__CloseUserSessionRequestType * SOAP_FMAC4 soap_in_ns1__CloseUserSessionRequestType(struct soap *soap, const char *tag, ns1__CloseUserSessionRequestType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__CloseUserSessionRequestType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__CloseUserSessionRequestType, sizeof(ns1__CloseUserSessionRequestType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__CloseUserSessionRequestType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__CloseUserSessionRequestType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_passwd1 = 1;
	size_t soap_flag_deviceId1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "userName", &a->ns1__CloseUserSessionRequestType::userName, "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			}
			if (soap_flag_passwd1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "passwd", &a->ns1__CloseUserSessionRequestType::passwd, "xsd:string"))
				{	soap_flag_passwd1--;
					continue;
				}
			}
			if (soap_flag_deviceId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "deviceId", &a->ns1__CloseUserSessionRequestType::deviceId, "xsd:string"))
				{	soap_flag_deviceId1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userName1 > 0 || soap_flag_passwd1 > 0 || soap_flag_deviceId1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__CloseUserSessionRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__CloseUserSessionRequestType, SOAP_TYPE_ns1__CloseUserSessionRequestType, sizeof(ns1__CloseUserSessionRequestType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__CloseUserSessionRequestType * SOAP_FMAC2 soap_instantiate_ns1__CloseUserSessionRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__CloseUserSessionRequestType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__CloseUserSessionRequestType *p;
	size_t k = sizeof(ns1__CloseUserSessionRequestType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__CloseUserSessionRequestType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__CloseUserSessionRequestType);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__CloseUserSessionRequestType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__CloseUserSessionRequestType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__CloseUserSessionRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__CloseUserSessionRequestType(soap, tag ? tag : "ns1:CloseUserSessionRequestType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__CloseUserSessionRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__CloseUserSessionRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__CloseUserSessionRequestType * SOAP_FMAC4 soap_get_ns1__CloseUserSessionRequestType(struct soap *soap, ns1__CloseUserSessionRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__CloseUserSessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__OpenUserSessionResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__OpenUserSessionResponseType::userDataSession = NULL;
	soap_default_ns2__SessionEnum(soap, &this->ns1__OpenUserSessionResponseType::response);
	soap_default_bool(soap, &this->ns1__OpenUserSessionResponseType::success);
}

void ns1__OpenUserSessionResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons2__UserDataSession(soap, &this->ns1__OpenUserSessionResponseType::userDataSession);
#endif
}

int ns1__OpenUserSessionResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__OpenUserSessionResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OpenUserSessionResponseType(struct soap *soap, const char *tag, int id, const ns1__OpenUserSessionResponseType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__OpenUserSessionResponseType), type))
		return soap->error;
	if (!a->ns1__OpenUserSessionResponseType::userDataSession)
	{	if (soap_element_empty(soap, "userDataSession"))
			return soap->error;
	}
	else if (soap_out_PointerTons2__UserDataSession(soap, "userDataSession", -1, &a->ns1__OpenUserSessionResponseType::userDataSession, ""))
		return soap->error;
	if (soap_out_ns2__SessionEnum(soap, "response", -1, &a->ns1__OpenUserSessionResponseType::response, ""))
		return soap->error;
	if (soap_out_bool(soap, "success", -1, &a->ns1__OpenUserSessionResponseType::success, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__OpenUserSessionResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__OpenUserSessionResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__OpenUserSessionResponseType * SOAP_FMAC4 soap_in_ns1__OpenUserSessionResponseType(struct soap *soap, const char *tag, ns1__OpenUserSessionResponseType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__OpenUserSessionResponseType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__OpenUserSessionResponseType, sizeof(ns1__OpenUserSessionResponseType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__OpenUserSessionResponseType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__OpenUserSessionResponseType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_userDataSession1 = 1;
	size_t soap_flag_response1 = 1;
	size_t soap_flag_success1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userDataSession1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__UserDataSession(soap, "userDataSession", &a->ns1__OpenUserSessionResponseType::userDataSession, "ns2:UserDataSession"))
				{	soap_flag_userDataSession1--;
					continue;
				}
			}
			if (soap_flag_response1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns2__SessionEnum(soap, "response", &a->ns1__OpenUserSessionResponseType::response, "ns2:SessionEnum"))
				{	soap_flag_response1--;
					continue;
				}
			}
			if (soap_flag_success1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "success", &a->ns1__OpenUserSessionResponseType::success, "xsd:boolean"))
				{	soap_flag_success1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->ns1__OpenUserSessionResponseType::userDataSession || soap_flag_response1 > 0 || soap_flag_success1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__OpenUserSessionResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__OpenUserSessionResponseType, SOAP_TYPE_ns1__OpenUserSessionResponseType, sizeof(ns1__OpenUserSessionResponseType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__OpenUserSessionResponseType * SOAP_FMAC2 soap_instantiate_ns1__OpenUserSessionResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__OpenUserSessionResponseType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__OpenUserSessionResponseType *p;
	size_t k = sizeof(ns1__OpenUserSessionResponseType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__OpenUserSessionResponseType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__OpenUserSessionResponseType);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__OpenUserSessionResponseType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__OpenUserSessionResponseType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__OpenUserSessionResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__OpenUserSessionResponseType(soap, tag ? tag : "ns1:OpenUserSessionResponseType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__OpenUserSessionResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__OpenUserSessionResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__OpenUserSessionResponseType * SOAP_FMAC4 soap_get_ns1__OpenUserSessionResponseType(struct soap *soap, ns1__OpenUserSessionResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__OpenUserSessionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__OpenUserSessionRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__OpenUserSessionRequestType::userName);
	soap_default_std__string(soap, &this->ns1__OpenUserSessionRequestType::passwd);
	soap_default_std__string(soap, &this->ns1__OpenUserSessionRequestType::deviceId);
}

void ns1__OpenUserSessionRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->ns1__OpenUserSessionRequestType::userName);
	soap_serialize_std__string(soap, &this->ns1__OpenUserSessionRequestType::passwd);
	soap_serialize_std__string(soap, &this->ns1__OpenUserSessionRequestType::deviceId);
#endif
}

int ns1__OpenUserSessionRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__OpenUserSessionRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OpenUserSessionRequestType(struct soap *soap, const char *tag, int id, const ns1__OpenUserSessionRequestType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__OpenUserSessionRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "userName", -1, &a->ns1__OpenUserSessionRequestType::userName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "passwd", -1, &a->ns1__OpenUserSessionRequestType::passwd, ""))
		return soap->error;
	if (soap_out_std__string(soap, "deviceId", -1, &a->ns1__OpenUserSessionRequestType::deviceId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__OpenUserSessionRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__OpenUserSessionRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__OpenUserSessionRequestType * SOAP_FMAC4 soap_in_ns1__OpenUserSessionRequestType(struct soap *soap, const char *tag, ns1__OpenUserSessionRequestType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__OpenUserSessionRequestType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__OpenUserSessionRequestType, sizeof(ns1__OpenUserSessionRequestType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__OpenUserSessionRequestType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__OpenUserSessionRequestType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_passwd1 = 1;
	size_t soap_flag_deviceId1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "userName", &a->ns1__OpenUserSessionRequestType::userName, "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			}
			if (soap_flag_passwd1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "passwd", &a->ns1__OpenUserSessionRequestType::passwd, "xsd:string"))
				{	soap_flag_passwd1--;
					continue;
				}
			}
			if (soap_flag_deviceId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "deviceId", &a->ns1__OpenUserSessionRequestType::deviceId, "xsd:string"))
				{	soap_flag_deviceId1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userName1 > 0 || soap_flag_passwd1 > 0 || soap_flag_deviceId1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__OpenUserSessionRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__OpenUserSessionRequestType, SOAP_TYPE_ns1__OpenUserSessionRequestType, sizeof(ns1__OpenUserSessionRequestType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__OpenUserSessionRequestType * SOAP_FMAC2 soap_instantiate_ns1__OpenUserSessionRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__OpenUserSessionRequestType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__OpenUserSessionRequestType *p;
	size_t k = sizeof(ns1__OpenUserSessionRequestType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__OpenUserSessionRequestType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__OpenUserSessionRequestType);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__OpenUserSessionRequestType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__OpenUserSessionRequestType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__OpenUserSessionRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__OpenUserSessionRequestType(soap, tag ? tag : "ns1:OpenUserSessionRequestType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__OpenUserSessionRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__OpenUserSessionRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__OpenUserSessionRequestType * SOAP_FMAC4 soap_get_ns1__OpenUserSessionRequestType(struct soap *soap, ns1__OpenUserSessionRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__OpenUserSessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseUserSession(struct soap *soap, struct __ns1__CloseUserSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseUserSessionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseUserSession(struct soap *soap, const struct __ns1__CloseUserSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__CloseUserSessionRequestType(soap, &a->ns1__CloseUserSessionRequest);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseUserSession(struct soap *soap, const char *tag, int id, const struct __ns1__CloseUserSession *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__CloseUserSessionRequestType(soap, "ns1:CloseUserSessionRequest", -1, &a->ns1__CloseUserSessionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CloseUserSession * SOAP_FMAC4 soap_in___ns1__CloseUserSession(struct soap *soap, const char *tag, struct __ns1__CloseUserSession *a, const char *type)
{
	size_t soap_flag_ns1__CloseUserSessionRequest = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CloseUserSession*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CloseUserSession, sizeof(struct __ns1__CloseUserSession), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CloseUserSession(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseUserSessionRequest && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__CloseUserSessionRequestType(soap, "ns1:CloseUserSessionRequest", &a->ns1__CloseUserSessionRequest, "ns1:CloseUserSessionRequestType"))
				{	soap_flag_ns1__CloseUserSessionRequest--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__CloseUserSession * SOAP_FMAC2 soap_instantiate___ns1__CloseUserSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CloseUserSession(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__CloseUserSession *p;
	size_t k = sizeof(struct __ns1__CloseUserSession);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__CloseUserSession, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__CloseUserSession);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__CloseUserSession, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__CloseUserSession location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseUserSession(struct soap *soap, const struct __ns1__CloseUserSession *a, const char *tag, const char *type)
{
	if (soap_out___ns1__CloseUserSession(soap, tag ? tag : "-ns1:CloseUserSession", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CloseUserSession * SOAP_FMAC4 soap_get___ns1__CloseUserSession(struct soap *soap, struct __ns1__CloseUserSession *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CloseUserSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenUserSession(struct soap *soap, struct __ns1__OpenUserSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenUserSessionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenUserSession(struct soap *soap, const struct __ns1__OpenUserSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__OpenUserSessionRequestType(soap, &a->ns1__OpenUserSessionRequest);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenUserSession(struct soap *soap, const char *tag, int id, const struct __ns1__OpenUserSession *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__OpenUserSessionRequestType(soap, "ns1:OpenUserSessionRequest", -1, &a->ns1__OpenUserSessionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenUserSession * SOAP_FMAC4 soap_in___ns1__OpenUserSession(struct soap *soap, const char *tag, struct __ns1__OpenUserSession *a, const char *type)
{
	size_t soap_flag_ns1__OpenUserSessionRequest = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__OpenUserSession*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OpenUserSession, sizeof(struct __ns1__OpenUserSession), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OpenUserSession(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenUserSessionRequest && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__OpenUserSessionRequestType(soap, "ns1:OpenUserSessionRequest", &a->ns1__OpenUserSessionRequest, "ns1:OpenUserSessionRequestType"))
				{	soap_flag_ns1__OpenUserSessionRequest--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__OpenUserSession * SOAP_FMAC2 soap_instantiate___ns1__OpenUserSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OpenUserSession(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__OpenUserSession *p;
	size_t k = sizeof(struct __ns1__OpenUserSession);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__OpenUserSession, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__OpenUserSession);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__OpenUserSession, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__OpenUserSession location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenUserSession(struct soap *soap, const struct __ns1__OpenUserSession *a, const char *tag, const char *type)
{
	if (soap_out___ns1__OpenUserSession(soap, tag ? tag : "-ns1:OpenUserSession", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OpenUserSession * SOAP_FMAC4 soap_get___ns1__OpenUserSession(struct soap *soap, struct __ns1__OpenUserSession *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OpenUserSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CloseUserSessionRequestType(struct soap *soap, ns1__CloseUserSessionRequestType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__CloseUserSessionRequestType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CloseUserSessionRequestType(struct soap *soap, const char *tag, int id, ns1__CloseUserSessionRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__CloseUserSessionRequestType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__CloseUserSessionRequestType ? type : NULL);
}

SOAP_FMAC3 ns1__CloseUserSessionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__CloseUserSessionRequestType(struct soap *soap, const char *tag, ns1__CloseUserSessionRequestType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__CloseUserSessionRequestType **)soap_malloc(soap, sizeof(ns1__CloseUserSessionRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__CloseUserSessionRequestType *)soap_instantiate_ns1__CloseUserSessionRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__CloseUserSessionRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__CloseUserSessionRequestType, sizeof(ns1__CloseUserSessionRequestType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CloseUserSessionRequestType(struct soap *soap, ns1__CloseUserSessionRequestType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__CloseUserSessionRequestType(soap, tag ? tag : "ns1:CloseUserSessionRequestType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__CloseUserSessionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__CloseUserSessionRequestType(struct soap *soap, ns1__CloseUserSessionRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__CloseUserSessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OpenUserSessionRequestType(struct soap *soap, ns1__OpenUserSessionRequestType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__OpenUserSessionRequestType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OpenUserSessionRequestType(struct soap *soap, const char *tag, int id, ns1__OpenUserSessionRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__OpenUserSessionRequestType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__OpenUserSessionRequestType ? type : NULL);
}

SOAP_FMAC3 ns1__OpenUserSessionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__OpenUserSessionRequestType(struct soap *soap, const char *tag, ns1__OpenUserSessionRequestType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__OpenUserSessionRequestType **)soap_malloc(soap, sizeof(ns1__OpenUserSessionRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__OpenUserSessionRequestType *)soap_instantiate_ns1__OpenUserSessionRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__OpenUserSessionRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__OpenUserSessionRequestType, sizeof(ns1__OpenUserSessionRequestType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OpenUserSessionRequestType(struct soap *soap, ns1__OpenUserSessionRequestType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__OpenUserSessionRequestType(soap, tag ? tag : "ns1:OpenUserSessionRequestType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__OpenUserSessionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__OpenUserSessionRequestType(struct soap *soap, ns1__OpenUserSessionRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__OpenUserSessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__UserDataSession(struct soap *soap, ns2__UserDataSession *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__UserDataSession))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__UserDataSession(struct soap *soap, const char *tag, int id, ns2__UserDataSession *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__UserDataSession, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns2__UserDataSession ? type : NULL);
}

SOAP_FMAC3 ns2__UserDataSession ** SOAP_FMAC4 soap_in_PointerTons2__UserDataSession(struct soap *soap, const char *tag, ns2__UserDataSession **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__UserDataSession **)soap_malloc(soap, sizeof(ns2__UserDataSession *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__UserDataSession *)soap_instantiate_ns2__UserDataSession(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns2__UserDataSession **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__UserDataSession, sizeof(ns2__UserDataSession), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__UserDataSession(struct soap *soap, ns2__UserDataSession *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons2__UserDataSession(soap, tag ? tag : "ns2:UserDataSession", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__UserDataSession ** SOAP_FMAC4 soap_get_PointerTons2__UserDataSession(struct soap *soap, ns2__UserDataSession **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__UserDataSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
