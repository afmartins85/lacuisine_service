/* soapStub.h
   Generated by gSOAP 2.8.103 for lacuisine.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://truetechsystems.com.br/lacuisine/hmi/v1/"
#define SOAP_NAMESPACE_OF_ns2	"http://truetechsystems.com.br/lacuisine/common/v1/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 208103
# error "GSOAP VERSION 208103 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* lacuisine.h:208 */
#ifndef SOAP_TYPE_ns2__ProfileEnum
#define SOAP_TYPE_ns2__ProfileEnum (20)
/* ns2:ProfileEnum */
enum ns2__ProfileEnum {
	ns2__ProfileEnum__ProfileMaster = 0,
	ns2__ProfileEnum__ProfileAdministrador = 1,
	ns2__ProfileEnum__ProfileCheckout = 2,
	ns2__ProfileEnum__ProfileKitchen = 3,
	ns2__ProfileEnum__ProfileUser = 4
};
#endif

/* lacuisine.h:220 */
#ifndef SOAP_TYPE_ns2__SessionEnum
#define SOAP_TYPE_ns2__SessionEnum (21)
/* ns2:SessionEnum */
enum ns2__SessionEnum {
	ns2__SessionEnum__SessionOk = 0,
	ns2__SessionEnum__SessionIsOpened = 1,
	ns2__SessionEnum__SessionCannotBeOpened = 2
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__base64Binary;	/* lacuisine.h:158 */
class ns1__AccessAuthenticationRequestType;	/* lacuisine.h:176 */
class ns1__AccessAuthenticationResponseType;	/* lacuisine.h:178 */
class ns1__OpenUserSessionRequest;	/* lacuisine.h:180 */
class ns1__OpenUserSessionResponse;	/* lacuisine.h:182 */
class ns2__AuthenticationType;	/* lacuisine.h:184 */
class ns2__UserDataSession;	/* lacuisine.h:186 */
struct __ns1__AccessAuthentication;	/* lacuisine.h:574 */
struct __ns1__OpenUserSession;	/* lacuisine.h:644 */

/* lacuisine.h:158 */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XML schema type 'xsd:string'
        char *id;
        /// Optional element 'type' of XML schema type 'xsd:string'
        char *type;
        /// Optional element 'options' of XML schema type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with default initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:176 */
#ifndef SOAP_TYPE_ns1__AccessAuthenticationRequestType
#define SOAP_TYPE_ns1__AccessAuthenticationRequestType (14)
/* complex XML schema type 'ns1:AccessAuthenticationRequestType': */
class SOAP_CMAC ns1__AccessAuthenticationRequestType {
      public:
        /// Required element 'AuthRequest' of XML schema type 'ns2:AuthenticationType'
        ns2__AuthenticationType *AuthRequest;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__AccessAuthenticationRequestType
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__AccessAuthenticationRequestType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__AccessAuthenticationRequestType, default initialized and not managed by a soap context
        virtual ns1__AccessAuthenticationRequestType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__AccessAuthenticationRequestType); }
      public:
        /// Constructor with default initializations
        ns1__AccessAuthenticationRequestType() : AuthRequest(), soap() { }
        virtual ~ns1__AccessAuthenticationRequestType() { }
        /// Friend allocator used by soap_new_ns1__AccessAuthenticationRequestType(struct soap*, int)
        friend SOAP_FMAC1 ns1__AccessAuthenticationRequestType * SOAP_FMAC2 soap_instantiate_ns1__AccessAuthenticationRequestType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:178 */
#ifndef SOAP_TYPE_ns1__AccessAuthenticationResponseType
#define SOAP_TYPE_ns1__AccessAuthenticationResponseType (15)
/* complex XML schema type 'ns1:AccessAuthenticationResponseType': */
class SOAP_CMAC ns1__AccessAuthenticationResponseType {
      public:
        /// Required element 'response' of XML schema type 'xsd:boolean'
        bool response;
        /// Required element 'success' of XML schema type 'xsd:boolean'
        bool success;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__AccessAuthenticationResponseType
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__AccessAuthenticationResponseType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__AccessAuthenticationResponseType, default initialized and not managed by a soap context
        virtual ns1__AccessAuthenticationResponseType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__AccessAuthenticationResponseType); }
      public:
        /// Constructor with default initializations
        ns1__AccessAuthenticationResponseType() : response(), success(), soap() { }
        virtual ~ns1__AccessAuthenticationResponseType() { }
        /// Friend allocator used by soap_new_ns1__AccessAuthenticationResponseType(struct soap*, int)
        friend SOAP_FMAC1 ns1__AccessAuthenticationResponseType * SOAP_FMAC2 soap_instantiate_ns1__AccessAuthenticationResponseType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:180 */
#ifndef SOAP_TYPE_ns1__OpenUserSessionRequest
#define SOAP_TYPE_ns1__OpenUserSessionRequest (16)
/* complex XML schema type 'ns1:OpenUserSessionRequest': */
class SOAP_CMAC ns1__OpenUserSessionRequest {
      public:
        /// Required element 'userName' of XML schema type 'xsd:string'
        std::string userName;
        /// Required element 'passwd' of XML schema type 'xsd:string'
        std::string passwd;
        /// Required element 'deviceId' of XML schema type 'xsd:string'
        std::string deviceId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__OpenUserSessionRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__OpenUserSessionRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__OpenUserSessionRequest, default initialized and not managed by a soap context
        virtual ns1__OpenUserSessionRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__OpenUserSessionRequest); }
      public:
        /// Constructor with default initializations
        ns1__OpenUserSessionRequest() : userName(), passwd(), deviceId(), soap() { }
        virtual ~ns1__OpenUserSessionRequest() { }
        /// Friend allocator used by soap_new_ns1__OpenUserSessionRequest(struct soap*, int)
        friend SOAP_FMAC1 ns1__OpenUserSessionRequest * SOAP_FMAC2 soap_instantiate_ns1__OpenUserSessionRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:182 */
#ifndef SOAP_TYPE_ns1__OpenUserSessionResponse
#define SOAP_TYPE_ns1__OpenUserSessionResponse (17)
/* complex XML schema type 'ns1:OpenUserSessionResponse': */
class SOAP_CMAC ns1__OpenUserSessionResponse {
      public:
        /// Required element 'userDataSession' of XML schema type 'xsd:UserDataSession'
        std::string userDataSession;
        /// Required element 'response' of XML schema type 'ns2:SessionEnum'
        enum ns2__SessionEnum response;
        /// Required element 'success' of XML schema type 'xsd:boolean'
        bool success;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__OpenUserSessionResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__OpenUserSessionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__OpenUserSessionResponse, default initialized and not managed by a soap context
        virtual ns1__OpenUserSessionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__OpenUserSessionResponse); }
      public:
        /// Constructor with default initializations
        ns1__OpenUserSessionResponse() : userDataSession(), response(), success(), soap() { }
        virtual ~ns1__OpenUserSessionResponse() { }
        /// Friend allocator used by soap_new_ns1__OpenUserSessionResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__OpenUserSessionResponse * SOAP_FMAC2 soap_instantiate_ns1__OpenUserSessionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:184 */
#ifndef SOAP_TYPE_ns2__AuthenticationType
#define SOAP_TYPE_ns2__AuthenticationType (18)
/* complex XML schema type 'ns2:AuthenticationType': */
class SOAP_CMAC ns2__AuthenticationType {
      public:
        /// Required element 'ns2:company' of XML schema type 'xsd:string'
        std::string company;
        /// Required element 'ns2:credentials' of XML schema type 'xsd:string'
        std::string credentials;
        /// Required element 'ns2:signature' of XML schema type 'xsd:base64Binary'
        xsd__base64Binary signature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns2__AuthenticationType
        virtual long soap_type(void) const { return SOAP_TYPE_ns2__AuthenticationType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns2__AuthenticationType, default initialized and not managed by a soap context
        virtual ns2__AuthenticationType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns2__AuthenticationType); }
      public:
        /// Constructor with default initializations
        ns2__AuthenticationType() : company(), credentials(), signature(), soap() { }
        virtual ~ns2__AuthenticationType() { }
        /// Friend allocator used by soap_new_ns2__AuthenticationType(struct soap*, int)
        friend SOAP_FMAC1 ns2__AuthenticationType * SOAP_FMAC2 soap_instantiate_ns2__AuthenticationType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:186 */
#ifndef SOAP_TYPE_ns2__UserDataSession
#define SOAP_TYPE_ns2__UserDataSession (19)
/* complex XML schema type 'ns2:UserDataSession': */
class SOAP_CMAC ns2__UserDataSession {
      public:
        /// Required element 'ns2:fullName' of XML schema type 'xsd:string'
        std::string fullName;
        /// Required element 'ns2:challenge' of XML schema type 'xsd:base64Binary'
        xsd__base64Binary challenge;
        /// Required element 'ns2:profileType' of XML schema type 'ns2:ProfileEnum'
        enum ns2__ProfileEnum profileType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns2__UserDataSession
        virtual long soap_type(void) const { return SOAP_TYPE_ns2__UserDataSession; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns2__UserDataSession, default initialized and not managed by a soap context
        virtual ns2__UserDataSession *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns2__UserDataSession); }
      public:
        /// Constructor with default initializations
        ns2__UserDataSession() : fullName(), challenge(), profileType(), soap() { }
        virtual ~ns2__UserDataSession() { }
        /// Friend allocator used by soap_new_ns2__UserDataSession(struct soap*, int)
        friend SOAP_FMAC1 ns2__UserDataSession * SOAP_FMAC2 soap_instantiate_ns2__UserDataSession(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:574 */
#ifndef SOAP_TYPE___ns1__AccessAuthentication
#define SOAP_TYPE___ns1__AccessAuthentication (28)
/* Wrapper: */
struct SOAP_CMAC __ns1__AccessAuthentication {
      public:
        /** Optional element 'ns1:AccessAuthenticationRequest' of XML schema type 'ns1:AccessAuthenticationRequestType' */
        ns1__AccessAuthenticationRequestType *ns1__AccessAuthenticationRequest;
      public:
        /** Return unique type id SOAP_TYPE___ns1__AccessAuthentication */
        long soap_type() const { return SOAP_TYPE___ns1__AccessAuthentication; }
        /** Constructor with member initializations */
        __ns1__AccessAuthentication() : ns1__AccessAuthenticationRequest() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AccessAuthentication * SOAP_FMAC2 soap_instantiate___ns1__AccessAuthentication(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:644 */
#ifndef SOAP_TYPE___ns1__OpenUserSession
#define SOAP_TYPE___ns1__OpenUserSession (32)
/* Wrapper: */
struct SOAP_CMAC __ns1__OpenUserSession {
      public:
        /** Optional element 'ns1:OpenUserSessionRequest' of XML schema type 'ns1:OpenUserSessionRequest' */
        ns1__OpenUserSessionRequest *ns1__OpenUserSessionRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OpenUserSession */
        long soap_type() const { return SOAP_TYPE___ns1__OpenUserSession; }
        /** Constructor with member initializations */
        __ns1__OpenUserSession() : ns1__OpenUserSessionRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__OpenUserSession * SOAP_FMAC2 soap_instantiate___ns1__OpenUserSession(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* lacuisine.h:719 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (33)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* lacuisine.h:719 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (34)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* lacuisine.h:719 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (36)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* lacuisine.h:719 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (39)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* lacuisine.h:719 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (40)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* lacuisine.h:166 */
#ifndef SOAP_TYPE_xsd__UserDataSession
#define SOAP_TYPE_xsd__UserDataSession (13)
typedef std::string xsd__UserDataSession;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (24)
#endif

/* enum ns2__SessionEnum has binding name 'ns2__SessionEnum' for type 'ns2:SessionEnum' */
#ifndef SOAP_TYPE_ns2__SessionEnum
#define SOAP_TYPE_ns2__SessionEnum (21)
#endif

/* enum ns2__ProfileEnum has binding name 'ns2__ProfileEnum' for type 'ns2:ProfileEnum' */
#ifndef SOAP_TYPE_ns2__ProfileEnum
#define SOAP_TYPE_ns2__ProfileEnum (20)
#endif

/* ns2__UserDataSession has binding name 'ns2__UserDataSession' for type 'ns2:UserDataSession' */
#ifndef SOAP_TYPE_ns2__UserDataSession
#define SOAP_TYPE_ns2__UserDataSession (19)
#endif

/* ns2__AuthenticationType has binding name 'ns2__AuthenticationType' for type 'ns2:AuthenticationType' */
#ifndef SOAP_TYPE_ns2__AuthenticationType
#define SOAP_TYPE_ns2__AuthenticationType (18)
#endif

/* ns1__OpenUserSessionResponse has binding name 'ns1__OpenUserSessionResponse' for type 'ns1:OpenUserSessionResponse' */
#ifndef SOAP_TYPE_ns1__OpenUserSessionResponse
#define SOAP_TYPE_ns1__OpenUserSessionResponse (17)
#endif

/* ns1__OpenUserSessionRequest has binding name 'ns1__OpenUserSessionRequest' for type 'ns1:OpenUserSessionRequest' */
#ifndef SOAP_TYPE_ns1__OpenUserSessionRequest
#define SOAP_TYPE_ns1__OpenUserSessionRequest (16)
#endif

/* ns1__AccessAuthenticationResponseType has binding name 'ns1__AccessAuthenticationResponseType' for type 'ns1:AccessAuthenticationResponseType' */
#ifndef SOAP_TYPE_ns1__AccessAuthenticationResponseType
#define SOAP_TYPE_ns1__AccessAuthenticationResponseType (15)
#endif

/* ns1__AccessAuthenticationRequestType has binding name 'ns1__AccessAuthenticationRequestType' for type 'ns1:AccessAuthenticationRequestType' */
#ifndef SOAP_TYPE_ns1__AccessAuthenticationRequestType
#define SOAP_TYPE_ns1__AccessAuthenticationRequestType (14)
#endif

/* xsd__UserDataSession has binding name 'xsd__UserDataSession' for type 'xsd:UserDataSession' */
#ifndef SOAP_TYPE_xsd__UserDataSession
#define SOAP_TYPE_xsd__UserDataSession (13)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (12)
#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (40)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (39)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (36)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (34)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (33)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (42)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (41)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (35)
#endif

/* ns1__OpenUserSessionRequest * has binding name 'PointerTons1__OpenUserSessionRequest' for type 'ns1:OpenUserSessionRequest' */
#ifndef SOAP_TYPE_PointerTons1__OpenUserSessionRequest
#define SOAP_TYPE_PointerTons1__OpenUserSessionRequest (29)
#endif

/* ns1__AccessAuthenticationRequestType * has binding name 'PointerTons1__AccessAuthenticationRequestType' for type 'ns1:AccessAuthenticationRequestType' */
#ifndef SOAP_TYPE_PointerTons1__AccessAuthenticationRequestType
#define SOAP_TYPE_PointerTons1__AccessAuthenticationRequestType (25)
#endif

/* ns2__AuthenticationType * has binding name 'PointerTons2__AuthenticationType' for type 'ns2:AuthenticationType' */
#ifndef SOAP_TYPE_PointerTons2__AuthenticationType
#define SOAP_TYPE_PointerTons2__AuthenticationType (22)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
