/* soapH.h
   Generated by gSOAP 2.8.103 for lacuisine.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__SessionEnum_DEFINED
#define SOAP_TYPE_ns2__SessionEnum_DEFINED

inline void soap_default_ns2__SessionEnum(struct soap *soap, enum ns2__SessionEnum *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__SessionEnum
	*a = SOAP_DEFAULT_ns2__SessionEnum;
#else
	*a = (enum ns2__SessionEnum)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SessionEnum(struct soap*, const char*, int, const enum ns2__SessionEnum *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__SessionEnum2s(struct soap*, enum ns2__SessionEnum);
SOAP_FMAC3 enum ns2__SessionEnum * SOAP_FMAC4 soap_in_ns2__SessionEnum(struct soap*, const char*, enum ns2__SessionEnum *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__SessionEnum(struct soap*, const char*, enum ns2__SessionEnum *);

SOAP_FMAC3 enum ns2__SessionEnum * SOAP_FMAC4 soap_new_ns2__SessionEnum(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SessionEnum(struct soap*, const enum ns2__SessionEnum *, const char*, const char*);

inline int soap_write_ns2__SessionEnum(struct soap *soap, enum ns2__SessionEnum const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns2__SessionEnum(soap, p, "ns2:SessionEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__SessionEnum(struct soap *soap, const char *URL, enum ns2__SessionEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__SessionEnum(soap, p, "ns2:SessionEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__SessionEnum(struct soap *soap, const char *URL, enum ns2__SessionEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__SessionEnum(soap, p, "ns2:SessionEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__SessionEnum(struct soap *soap, const char *URL, enum ns2__SessionEnum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__SessionEnum(soap, p, "ns2:SessionEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns2__SessionEnum * SOAP_FMAC4 soap_get_ns2__SessionEnum(struct soap*, enum ns2__SessionEnum *, const char*, const char*);

inline int soap_read_ns2__SessionEnum(struct soap *soap, enum ns2__SessionEnum *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns2__SessionEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__SessionEnum(struct soap *soap, const char *URL, enum ns2__SessionEnum *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__SessionEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__SessionEnum(struct soap *soap, enum ns2__SessionEnum *p)
{
	if (::soap_read_ns2__SessionEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__ProfileEnum_DEFINED
#define SOAP_TYPE_ns2__ProfileEnum_DEFINED

inline void soap_default_ns2__ProfileEnum(struct soap *soap, enum ns2__ProfileEnum *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__ProfileEnum
	*a = SOAP_DEFAULT_ns2__ProfileEnum;
#else
	*a = (enum ns2__ProfileEnum)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProfileEnum(struct soap*, const char*, int, const enum ns2__ProfileEnum *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ProfileEnum2s(struct soap*, enum ns2__ProfileEnum);
SOAP_FMAC3 enum ns2__ProfileEnum * SOAP_FMAC4 soap_in_ns2__ProfileEnum(struct soap*, const char*, enum ns2__ProfileEnum *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ProfileEnum(struct soap*, const char*, enum ns2__ProfileEnum *);

SOAP_FMAC3 enum ns2__ProfileEnum * SOAP_FMAC4 soap_new_ns2__ProfileEnum(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ProfileEnum(struct soap*, const enum ns2__ProfileEnum *, const char*, const char*);

inline int soap_write_ns2__ProfileEnum(struct soap *soap, enum ns2__ProfileEnum const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns2__ProfileEnum(soap, p, "ns2:ProfileEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__ProfileEnum(struct soap *soap, const char *URL, enum ns2__ProfileEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__ProfileEnum(soap, p, "ns2:ProfileEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__ProfileEnum(struct soap *soap, const char *URL, enum ns2__ProfileEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__ProfileEnum(soap, p, "ns2:ProfileEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ProfileEnum(struct soap *soap, const char *URL, enum ns2__ProfileEnum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__ProfileEnum(soap, p, "ns2:ProfileEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns2__ProfileEnum * SOAP_FMAC4 soap_get_ns2__ProfileEnum(struct soap*, enum ns2__ProfileEnum *, const char*, const char*);

inline int soap_read_ns2__ProfileEnum(struct soap *soap, enum ns2__ProfileEnum *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns2__ProfileEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ProfileEnum(struct soap *soap, const char *URL, enum ns2__ProfileEnum *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ProfileEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__ProfileEnum(struct soap *soap, enum ns2__ProfileEnum *p)
{
	if (::soap_read_ns2__ProfileEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__UserDataSession_DEFINED
#define SOAP_TYPE_ns2__UserDataSession_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UserDataSession(struct soap*, const char*, int, const ns2__UserDataSession *, const char*);
SOAP_FMAC3 ns2__UserDataSession * SOAP_FMAC4 soap_in_ns2__UserDataSession(struct soap*, const char*, ns2__UserDataSession *, const char*);
SOAP_FMAC1 ns2__UserDataSession * SOAP_FMAC2 soap_instantiate_ns2__UserDataSession(struct soap*, int, const char*, const char*, size_t*);

inline ns2__UserDataSession * soap_new_ns2__UserDataSession(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__UserDataSession(soap, n, NULL, NULL, NULL);
}

inline ns2__UserDataSession * soap_new_req_ns2__UserDataSession(
	struct soap *soap,
	const std::string& fullName,
	const xsd__base64Binary& challenge,
	enum ns2__ProfileEnum profileType)
{
	ns2__UserDataSession *_p = ::soap_new_ns2__UserDataSession(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UserDataSession::fullName = fullName;
		_p->ns2__UserDataSession::challenge = challenge;
		_p->ns2__UserDataSession::profileType = profileType;
	}
	return _p;
}

inline ns2__UserDataSession * soap_new_set_ns2__UserDataSession(
	struct soap *soap,
	const std::string& fullName,
	const xsd__base64Binary& challenge,
	enum ns2__ProfileEnum profileType)
{
	ns2__UserDataSession *_p = ::soap_new_ns2__UserDataSession(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UserDataSession::fullName = fullName;
		_p->ns2__UserDataSession::challenge = challenge;
		_p->ns2__UserDataSession::profileType = profileType;
	}
	return _p;
}

inline int soap_write_ns2__UserDataSession(struct soap *soap, ns2__UserDataSession const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UserDataSession", p->soap_type() == SOAP_TYPE_ns2__UserDataSession ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__UserDataSession(struct soap *soap, const char *URL, ns2__UserDataSession const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UserDataSession", p->soap_type() == SOAP_TYPE_ns2__UserDataSession ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__UserDataSession(struct soap *soap, const char *URL, ns2__UserDataSession const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UserDataSession", p->soap_type() == SOAP_TYPE_ns2__UserDataSession ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__UserDataSession(struct soap *soap, const char *URL, ns2__UserDataSession const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UserDataSession", p->soap_type() == SOAP_TYPE_ns2__UserDataSession ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__UserDataSession * SOAP_FMAC4 soap_get_ns2__UserDataSession(struct soap*, ns2__UserDataSession *, const char*, const char*);

inline int soap_read_ns2__UserDataSession(struct soap *soap, ns2__UserDataSession *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__UserDataSession(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__UserDataSession(struct soap *soap, const char *URL, ns2__UserDataSession *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__UserDataSession(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__UserDataSession(struct soap *soap, ns2__UserDataSession *p)
{
	if (::soap_read_ns2__UserDataSession(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__AuthenticationType_DEFINED
#define SOAP_TYPE_ns2__AuthenticationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AuthenticationType(struct soap*, const char*, int, const ns2__AuthenticationType *, const char*);
SOAP_FMAC3 ns2__AuthenticationType * SOAP_FMAC4 soap_in_ns2__AuthenticationType(struct soap*, const char*, ns2__AuthenticationType *, const char*);
SOAP_FMAC1 ns2__AuthenticationType * SOAP_FMAC2 soap_instantiate_ns2__AuthenticationType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AuthenticationType * soap_new_ns2__AuthenticationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__AuthenticationType(soap, n, NULL, NULL, NULL);
}

inline ns2__AuthenticationType * soap_new_req_ns2__AuthenticationType(
	struct soap *soap,
	const std::string& company,
	const std::string& credentials,
	const xsd__base64Binary& signature)
{
	ns2__AuthenticationType *_p = ::soap_new_ns2__AuthenticationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AuthenticationType::company = company;
		_p->ns2__AuthenticationType::credentials = credentials;
		_p->ns2__AuthenticationType::signature = signature;
	}
	return _p;
}

inline ns2__AuthenticationType * soap_new_set_ns2__AuthenticationType(
	struct soap *soap,
	const std::string& company,
	const std::string& credentials,
	const xsd__base64Binary& signature)
{
	ns2__AuthenticationType *_p = ::soap_new_ns2__AuthenticationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AuthenticationType::company = company;
		_p->ns2__AuthenticationType::credentials = credentials;
		_p->ns2__AuthenticationType::signature = signature;
	}
	return _p;
}

inline int soap_write_ns2__AuthenticationType(struct soap *soap, ns2__AuthenticationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuthenticationType", p->soap_type() == SOAP_TYPE_ns2__AuthenticationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AuthenticationType(struct soap *soap, const char *URL, ns2__AuthenticationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuthenticationType", p->soap_type() == SOAP_TYPE_ns2__AuthenticationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__AuthenticationType(struct soap *soap, const char *URL, ns2__AuthenticationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuthenticationType", p->soap_type() == SOAP_TYPE_ns2__AuthenticationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AuthenticationType(struct soap *soap, const char *URL, ns2__AuthenticationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AuthenticationType", p->soap_type() == SOAP_TYPE_ns2__AuthenticationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AuthenticationType * SOAP_FMAC4 soap_get_ns2__AuthenticationType(struct soap*, ns2__AuthenticationType *, const char*, const char*);

inline int soap_read_ns2__AuthenticationType(struct soap *soap, ns2__AuthenticationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__AuthenticationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AuthenticationType(struct soap *soap, const char *URL, ns2__AuthenticationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__AuthenticationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__AuthenticationType(struct soap *soap, ns2__AuthenticationType *p)
{
	if (::soap_read_ns2__AuthenticationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OpenUserSessionResponse_DEFINED
#define SOAP_TYPE_ns1__OpenUserSessionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OpenUserSessionResponse(struct soap*, const char*, int, const ns1__OpenUserSessionResponse *, const char*);
SOAP_FMAC3 ns1__OpenUserSessionResponse * SOAP_FMAC4 soap_in_ns1__OpenUserSessionResponse(struct soap*, const char*, ns1__OpenUserSessionResponse *, const char*);
SOAP_FMAC1 ns1__OpenUserSessionResponse * SOAP_FMAC2 soap_instantiate_ns1__OpenUserSessionResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OpenUserSessionResponse * soap_new_ns1__OpenUserSessionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OpenUserSessionResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__OpenUserSessionResponse * soap_new_req_ns1__OpenUserSessionResponse(
	struct soap *soap,
	const std::string& userDataSession,
	enum ns2__SessionEnum response,
	bool success)
{
	ns1__OpenUserSessionResponse *_p = ::soap_new_ns1__OpenUserSessionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpenUserSessionResponse::userDataSession = userDataSession;
		_p->ns1__OpenUserSessionResponse::response = response;
		_p->ns1__OpenUserSessionResponse::success = success;
	}
	return _p;
}

inline ns1__OpenUserSessionResponse * soap_new_set_ns1__OpenUserSessionResponse(
	struct soap *soap,
	const std::string& userDataSession,
	enum ns2__SessionEnum response,
	bool success)
{
	ns1__OpenUserSessionResponse *_p = ::soap_new_ns1__OpenUserSessionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpenUserSessionResponse::userDataSession = userDataSession;
		_p->ns1__OpenUserSessionResponse::response = response;
		_p->ns1__OpenUserSessionResponse::success = success;
	}
	return _p;
}

inline int soap_write_ns1__OpenUserSessionResponse(struct soap *soap, ns1__OpenUserSessionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenUserSessionResponse", p->soap_type() == SOAP_TYPE_ns1__OpenUserSessionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OpenUserSessionResponse(struct soap *soap, const char *URL, ns1__OpenUserSessionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenUserSessionResponse", p->soap_type() == SOAP_TYPE_ns1__OpenUserSessionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OpenUserSessionResponse(struct soap *soap, const char *URL, ns1__OpenUserSessionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenUserSessionResponse", p->soap_type() == SOAP_TYPE_ns1__OpenUserSessionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OpenUserSessionResponse(struct soap *soap, const char *URL, ns1__OpenUserSessionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenUserSessionResponse", p->soap_type() == SOAP_TYPE_ns1__OpenUserSessionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OpenUserSessionResponse * SOAP_FMAC4 soap_get_ns1__OpenUserSessionResponse(struct soap*, ns1__OpenUserSessionResponse *, const char*, const char*);

inline int soap_read_ns1__OpenUserSessionResponse(struct soap *soap, ns1__OpenUserSessionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OpenUserSessionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OpenUserSessionResponse(struct soap *soap, const char *URL, ns1__OpenUserSessionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OpenUserSessionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OpenUserSessionResponse(struct soap *soap, ns1__OpenUserSessionResponse *p)
{
	if (::soap_read_ns1__OpenUserSessionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OpenUserSessionRequest_DEFINED
#define SOAP_TYPE_ns1__OpenUserSessionRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OpenUserSessionRequest(struct soap*, const char*, int, const ns1__OpenUserSessionRequest *, const char*);
SOAP_FMAC3 ns1__OpenUserSessionRequest * SOAP_FMAC4 soap_in_ns1__OpenUserSessionRequest(struct soap*, const char*, ns1__OpenUserSessionRequest *, const char*);
SOAP_FMAC1 ns1__OpenUserSessionRequest * SOAP_FMAC2 soap_instantiate_ns1__OpenUserSessionRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OpenUserSessionRequest * soap_new_ns1__OpenUserSessionRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OpenUserSessionRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__OpenUserSessionRequest * soap_new_req_ns1__OpenUserSessionRequest(
	struct soap *soap,
	const std::string& userName,
	const std::string& passwd,
	const std::string& deviceId)
{
	ns1__OpenUserSessionRequest *_p = ::soap_new_ns1__OpenUserSessionRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpenUserSessionRequest::userName = userName;
		_p->ns1__OpenUserSessionRequest::passwd = passwd;
		_p->ns1__OpenUserSessionRequest::deviceId = deviceId;
	}
	return _p;
}

inline ns1__OpenUserSessionRequest * soap_new_set_ns1__OpenUserSessionRequest(
	struct soap *soap,
	const std::string& userName,
	const std::string& passwd,
	const std::string& deviceId)
{
	ns1__OpenUserSessionRequest *_p = ::soap_new_ns1__OpenUserSessionRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpenUserSessionRequest::userName = userName;
		_p->ns1__OpenUserSessionRequest::passwd = passwd;
		_p->ns1__OpenUserSessionRequest::deviceId = deviceId;
	}
	return _p;
}

inline int soap_write_ns1__OpenUserSessionRequest(struct soap *soap, ns1__OpenUserSessionRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenUserSessionRequest", p->soap_type() == SOAP_TYPE_ns1__OpenUserSessionRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OpenUserSessionRequest(struct soap *soap, const char *URL, ns1__OpenUserSessionRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenUserSessionRequest", p->soap_type() == SOAP_TYPE_ns1__OpenUserSessionRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OpenUserSessionRequest(struct soap *soap, const char *URL, ns1__OpenUserSessionRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenUserSessionRequest", p->soap_type() == SOAP_TYPE_ns1__OpenUserSessionRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OpenUserSessionRequest(struct soap *soap, const char *URL, ns1__OpenUserSessionRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenUserSessionRequest", p->soap_type() == SOAP_TYPE_ns1__OpenUserSessionRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OpenUserSessionRequest * SOAP_FMAC4 soap_get_ns1__OpenUserSessionRequest(struct soap*, ns1__OpenUserSessionRequest *, const char*, const char*);

inline int soap_read_ns1__OpenUserSessionRequest(struct soap *soap, ns1__OpenUserSessionRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OpenUserSessionRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OpenUserSessionRequest(struct soap *soap, const char *URL, ns1__OpenUserSessionRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OpenUserSessionRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OpenUserSessionRequest(struct soap *soap, ns1__OpenUserSessionRequest *p)
{
	if (::soap_read_ns1__OpenUserSessionRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AccessAuthenticationResponseType_DEFINED
#define SOAP_TYPE_ns1__AccessAuthenticationResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccessAuthenticationResponseType(struct soap*, const char*, int, const ns1__AccessAuthenticationResponseType *, const char*);
SOAP_FMAC3 ns1__AccessAuthenticationResponseType * SOAP_FMAC4 soap_in_ns1__AccessAuthenticationResponseType(struct soap*, const char*, ns1__AccessAuthenticationResponseType *, const char*);
SOAP_FMAC1 ns1__AccessAuthenticationResponseType * SOAP_FMAC2 soap_instantiate_ns1__AccessAuthenticationResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccessAuthenticationResponseType * soap_new_ns1__AccessAuthenticationResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccessAuthenticationResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccessAuthenticationResponseType * soap_new_req_ns1__AccessAuthenticationResponseType(
	struct soap *soap,
	bool response,
	bool success)
{
	ns1__AccessAuthenticationResponseType *_p = ::soap_new_ns1__AccessAuthenticationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccessAuthenticationResponseType::response = response;
		_p->ns1__AccessAuthenticationResponseType::success = success;
	}
	return _p;
}

inline ns1__AccessAuthenticationResponseType * soap_new_set_ns1__AccessAuthenticationResponseType(
	struct soap *soap,
	bool response,
	bool success)
{
	ns1__AccessAuthenticationResponseType *_p = ::soap_new_ns1__AccessAuthenticationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccessAuthenticationResponseType::response = response;
		_p->ns1__AccessAuthenticationResponseType::success = success;
	}
	return _p;
}

inline int soap_write_ns1__AccessAuthenticationResponseType(struct soap *soap, ns1__AccessAuthenticationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessAuthenticationResponseType", p->soap_type() == SOAP_TYPE_ns1__AccessAuthenticationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccessAuthenticationResponseType(struct soap *soap, const char *URL, ns1__AccessAuthenticationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessAuthenticationResponseType", p->soap_type() == SOAP_TYPE_ns1__AccessAuthenticationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AccessAuthenticationResponseType(struct soap *soap, const char *URL, ns1__AccessAuthenticationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessAuthenticationResponseType", p->soap_type() == SOAP_TYPE_ns1__AccessAuthenticationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccessAuthenticationResponseType(struct soap *soap, const char *URL, ns1__AccessAuthenticationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessAuthenticationResponseType", p->soap_type() == SOAP_TYPE_ns1__AccessAuthenticationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccessAuthenticationResponseType * SOAP_FMAC4 soap_get_ns1__AccessAuthenticationResponseType(struct soap*, ns1__AccessAuthenticationResponseType *, const char*, const char*);

inline int soap_read_ns1__AccessAuthenticationResponseType(struct soap *soap, ns1__AccessAuthenticationResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AccessAuthenticationResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccessAuthenticationResponseType(struct soap *soap, const char *URL, ns1__AccessAuthenticationResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AccessAuthenticationResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AccessAuthenticationResponseType(struct soap *soap, ns1__AccessAuthenticationResponseType *p)
{
	if (::soap_read_ns1__AccessAuthenticationResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AccessAuthenticationRequestType_DEFINED
#define SOAP_TYPE_ns1__AccessAuthenticationRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccessAuthenticationRequestType(struct soap*, const char*, int, const ns1__AccessAuthenticationRequestType *, const char*);
SOAP_FMAC3 ns1__AccessAuthenticationRequestType * SOAP_FMAC4 soap_in_ns1__AccessAuthenticationRequestType(struct soap*, const char*, ns1__AccessAuthenticationRequestType *, const char*);
SOAP_FMAC1 ns1__AccessAuthenticationRequestType * SOAP_FMAC2 soap_instantiate_ns1__AccessAuthenticationRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccessAuthenticationRequestType * soap_new_ns1__AccessAuthenticationRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccessAuthenticationRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccessAuthenticationRequestType * soap_new_req_ns1__AccessAuthenticationRequestType(
	struct soap *soap,
	ns2__AuthenticationType *AuthRequest)
{
	ns1__AccessAuthenticationRequestType *_p = ::soap_new_ns1__AccessAuthenticationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccessAuthenticationRequestType::AuthRequest = AuthRequest;
	}
	return _p;
}

inline ns1__AccessAuthenticationRequestType * soap_new_set_ns1__AccessAuthenticationRequestType(
	struct soap *soap,
	ns2__AuthenticationType *AuthRequest)
{
	ns1__AccessAuthenticationRequestType *_p = ::soap_new_ns1__AccessAuthenticationRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccessAuthenticationRequestType::AuthRequest = AuthRequest;
	}
	return _p;
}

inline int soap_write_ns1__AccessAuthenticationRequestType(struct soap *soap, ns1__AccessAuthenticationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessAuthenticationRequestType", p->soap_type() == SOAP_TYPE_ns1__AccessAuthenticationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccessAuthenticationRequestType(struct soap *soap, const char *URL, ns1__AccessAuthenticationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessAuthenticationRequestType", p->soap_type() == SOAP_TYPE_ns1__AccessAuthenticationRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AccessAuthenticationRequestType(struct soap *soap, const char *URL, ns1__AccessAuthenticationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessAuthenticationRequestType", p->soap_type() == SOAP_TYPE_ns1__AccessAuthenticationRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccessAuthenticationRequestType(struct soap *soap, const char *URL, ns1__AccessAuthenticationRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccessAuthenticationRequestType", p->soap_type() == SOAP_TYPE_ns1__AccessAuthenticationRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccessAuthenticationRequestType * SOAP_FMAC4 soap_get_ns1__AccessAuthenticationRequestType(struct soap*, ns1__AccessAuthenticationRequestType *, const char*, const char*);

inline int soap_read_ns1__AccessAuthenticationRequestType(struct soap *soap, ns1__AccessAuthenticationRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AccessAuthenticationRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccessAuthenticationRequestType(struct soap *soap, const char *URL, ns1__AccessAuthenticationRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AccessAuthenticationRequestType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AccessAuthenticationRequestType(struct soap *soap, ns1__AccessAuthenticationRequestType *p)
{
	if (::soap_read_ns1__AccessAuthenticationRequestType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__UserDataSession_DEFINED
#define SOAP_TYPE_xsd__UserDataSession_DEFINED

inline void soap_default_xsd__UserDataSession(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__UserDataSession(struct soap*, const std::string *);

#define soap_xsd__UserDataSession2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__UserDataSession(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__UserDataSession(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__UserDataSession(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__UserDataSession soap_instantiate_std__string


#define soap_new_xsd__UserDataSession soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__UserDataSession(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__UserDataSession(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__UserDataSession(soap, p, "xsd:UserDataSession", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__UserDataSession(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__UserDataSession(soap, p, "xsd:UserDataSession", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__UserDataSession(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__UserDataSession(soap, p, "xsd:UserDataSession", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__UserDataSession(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__UserDataSession(soap, p, "xsd:UserDataSession", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__UserDataSession(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__UserDataSession(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__UserDataSession(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__UserDataSession(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__UserDataSession(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__UserDataSession(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__UserDataSession(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__OpenUserSession_DEFINED
#define SOAP_TYPE___ns1__OpenUserSession_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenUserSession(struct soap*, struct __ns1__OpenUserSession *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenUserSession(struct soap*, const struct __ns1__OpenUserSession *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenUserSession(struct soap*, const char*, int, const struct __ns1__OpenUserSession *, const char*);
SOAP_FMAC3 struct __ns1__OpenUserSession * SOAP_FMAC4 soap_in___ns1__OpenUserSession(struct soap*, const char*, struct __ns1__OpenUserSession *, const char*);
SOAP_FMAC1 struct __ns1__OpenUserSession * SOAP_FMAC2 soap_instantiate___ns1__OpenUserSession(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OpenUserSession * soap_new___ns1__OpenUserSession(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OpenUserSession(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OpenUserSession * soap_new_req___ns1__OpenUserSession(
	struct soap *soap)
{
	struct __ns1__OpenUserSession *_p = ::soap_new___ns1__OpenUserSession(soap);
	if (_p)
	{	::soap_default___ns1__OpenUserSession(soap, _p);
	}
	return _p;
}

inline struct __ns1__OpenUserSession * soap_new_set___ns1__OpenUserSession(
	struct soap *soap,
	ns1__OpenUserSessionRequest *ns1__OpenUserSessionRequest_)
{
	struct __ns1__OpenUserSession *_p = ::soap_new___ns1__OpenUserSession(soap);
	if (_p)
	{	::soap_default___ns1__OpenUserSession(soap, _p);
		_p->ns1__OpenUserSessionRequest_ = ns1__OpenUserSessionRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenUserSession(struct soap*, const struct __ns1__OpenUserSession *, const char*, const char*);

inline int soap_write___ns1__OpenUserSession(struct soap *soap, struct __ns1__OpenUserSession const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OpenUserSession(soap, p), 0) || ::soap_put___ns1__OpenUserSession(soap, p, "-ns1:OpenUserSession", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OpenUserSession(struct soap *soap, const char *URL, struct __ns1__OpenUserSession const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OpenUserSession(soap, p), 0) || ::soap_put___ns1__OpenUserSession(soap, p, "-ns1:OpenUserSession", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OpenUserSession(struct soap *soap, const char *URL, struct __ns1__OpenUserSession const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OpenUserSession(soap, p), 0) || ::soap_put___ns1__OpenUserSession(soap, p, "-ns1:OpenUserSession", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OpenUserSession(struct soap *soap, const char *URL, struct __ns1__OpenUserSession const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OpenUserSession(soap, p), 0) || ::soap_put___ns1__OpenUserSession(soap, p, "-ns1:OpenUserSession", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OpenUserSession * SOAP_FMAC4 soap_get___ns1__OpenUserSession(struct soap*, struct __ns1__OpenUserSession *, const char*, const char*);

inline int soap_read___ns1__OpenUserSession(struct soap *soap, struct __ns1__OpenUserSession *p)
{
	if (p)
	{	::soap_default___ns1__OpenUserSession(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OpenUserSession(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OpenUserSession(struct soap *soap, const char *URL, struct __ns1__OpenUserSession *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OpenUserSession(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OpenUserSession(struct soap *soap, struct __ns1__OpenUserSession *p)
{
	if (::soap_read___ns1__OpenUserSession(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__AccessAuthentication_DEFINED
#define SOAP_TYPE___ns1__AccessAuthentication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AccessAuthentication(struct soap*, struct __ns1__AccessAuthentication *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AccessAuthentication(struct soap*, const struct __ns1__AccessAuthentication *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AccessAuthentication(struct soap*, const char*, int, const struct __ns1__AccessAuthentication *, const char*);
SOAP_FMAC3 struct __ns1__AccessAuthentication * SOAP_FMAC4 soap_in___ns1__AccessAuthentication(struct soap*, const char*, struct __ns1__AccessAuthentication *, const char*);
SOAP_FMAC1 struct __ns1__AccessAuthentication * SOAP_FMAC2 soap_instantiate___ns1__AccessAuthentication(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AccessAuthentication * soap_new___ns1__AccessAuthentication(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__AccessAuthentication(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AccessAuthentication * soap_new_req___ns1__AccessAuthentication(
	struct soap *soap)
{
	struct __ns1__AccessAuthentication *_p = ::soap_new___ns1__AccessAuthentication(soap);
	if (_p)
	{	::soap_default___ns1__AccessAuthentication(soap, _p);
	}
	return _p;
}

inline struct __ns1__AccessAuthentication * soap_new_set___ns1__AccessAuthentication(
	struct soap *soap,
	ns1__AccessAuthenticationRequestType *ns1__AccessAuthenticationRequest)
{
	struct __ns1__AccessAuthentication *_p = ::soap_new___ns1__AccessAuthentication(soap);
	if (_p)
	{	::soap_default___ns1__AccessAuthentication(soap, _p);
		_p->ns1__AccessAuthenticationRequest = ns1__AccessAuthenticationRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AccessAuthentication(struct soap*, const struct __ns1__AccessAuthentication *, const char*, const char*);

inline int soap_write___ns1__AccessAuthentication(struct soap *soap, struct __ns1__AccessAuthentication const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__AccessAuthentication(soap, p), 0) || ::soap_put___ns1__AccessAuthentication(soap, p, "-ns1:AccessAuthentication", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AccessAuthentication(struct soap *soap, const char *URL, struct __ns1__AccessAuthentication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__AccessAuthentication(soap, p), 0) || ::soap_put___ns1__AccessAuthentication(soap, p, "-ns1:AccessAuthentication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__AccessAuthentication(struct soap *soap, const char *URL, struct __ns1__AccessAuthentication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__AccessAuthentication(soap, p), 0) || ::soap_put___ns1__AccessAuthentication(soap, p, "-ns1:AccessAuthentication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AccessAuthentication(struct soap *soap, const char *URL, struct __ns1__AccessAuthentication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__AccessAuthentication(soap, p), 0) || ::soap_put___ns1__AccessAuthentication(soap, p, "-ns1:AccessAuthentication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AccessAuthentication * SOAP_FMAC4 soap_get___ns1__AccessAuthentication(struct soap*, struct __ns1__AccessAuthentication *, const char*, const char*);

inline int soap_read___ns1__AccessAuthentication(struct soap *soap, struct __ns1__AccessAuthentication *p)
{
	if (p)
	{	::soap_default___ns1__AccessAuthentication(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__AccessAuthentication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AccessAuthentication(struct soap *soap, const char *URL, struct __ns1__AccessAuthentication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__AccessAuthentication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__AccessAuthentication(struct soap *soap, struct __ns1__AccessAuthentication *p)
{
	if (::soap_read___ns1__AccessAuthentication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__OpenUserSessionRequest_DEFINED
#define SOAP_TYPE_PointerTons1__OpenUserSessionRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OpenUserSessionRequest(struct soap*, ns1__OpenUserSessionRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OpenUserSessionRequest(struct soap*, const char *, int, ns1__OpenUserSessionRequest *const*, const char *);
SOAP_FMAC3 ns1__OpenUserSessionRequest ** SOAP_FMAC4 soap_in_PointerTons1__OpenUserSessionRequest(struct soap*, const char*, ns1__OpenUserSessionRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OpenUserSessionRequest(struct soap*, ns1__OpenUserSessionRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__OpenUserSessionRequest ** SOAP_FMAC4 soap_get_PointerTons1__OpenUserSessionRequest(struct soap*, ns1__OpenUserSessionRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccessAuthenticationRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__AccessAuthenticationRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccessAuthenticationRequestType(struct soap*, ns1__AccessAuthenticationRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccessAuthenticationRequestType(struct soap*, const char *, int, ns1__AccessAuthenticationRequestType *const*, const char *);
SOAP_FMAC3 ns1__AccessAuthenticationRequestType ** SOAP_FMAC4 soap_in_PointerTons1__AccessAuthenticationRequestType(struct soap*, const char*, ns1__AccessAuthenticationRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccessAuthenticationRequestType(struct soap*, ns1__AccessAuthenticationRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccessAuthenticationRequestType ** SOAP_FMAC4 soap_get_PointerTons1__AccessAuthenticationRequestType(struct soap*, ns1__AccessAuthenticationRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AuthenticationType_DEFINED
#define SOAP_TYPE_PointerTons2__AuthenticationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AuthenticationType(struct soap*, ns2__AuthenticationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AuthenticationType(struct soap*, const char *, int, ns2__AuthenticationType *const*, const char *);
SOAP_FMAC3 ns2__AuthenticationType ** SOAP_FMAC4 soap_in_PointerTons2__AuthenticationType(struct soap*, const char*, ns2__AuthenticationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AuthenticationType(struct soap*, ns2__AuthenticationType *const*, const char*, const char*);
SOAP_FMAC3 ns2__AuthenticationType ** SOAP_FMAC4 soap_get_PointerTons2__AuthenticationType(struct soap*, ns2__AuthenticationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
