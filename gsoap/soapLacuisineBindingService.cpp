/* soapLacuisineBindingService.cpp
   Generated by gSOAP 2.8.103 for lacuisine.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapLacuisineBindingService.h"

LacuisineBindingService::LacuisineBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	LacuisineBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

LacuisineBindingService::LacuisineBindingService(const LacuisineBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

LacuisineBindingService::LacuisineBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	LacuisineBindingService_init(_soap->imode, _soap->omode);
}

LacuisineBindingService::LacuisineBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	LacuisineBindingService_init(iomode, iomode);
}

LacuisineBindingService::LacuisineBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	LacuisineBindingService_init(imode, omode);
}

LacuisineBindingService::~LacuisineBindingService()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void LacuisineBindingService::LacuisineBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns2", "http://truetechsystems.com.br/lacuisine/common/v1/", NULL, NULL },
        { "ns1", "http://truetechsystems.com.br/lacuisine/hmi/v1/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void LacuisineBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void LacuisineBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	LacuisineBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
LacuisineBindingService *LacuisineBindingService::copy()
{	LacuisineBindingService *dup = SOAP_NEW_UNMANAGED(LacuisineBindingService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

LacuisineBindingService& LacuisineBindingService::operator=(const LacuisineBindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int LacuisineBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int LacuisineBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int LacuisineBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int LacuisineBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int LacuisineBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int LacuisineBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void LacuisineBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void LacuisineBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *LacuisineBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void LacuisineBindingService::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *LacuisineBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int LacuisineBindingService::run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int LacuisineBindingService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET LacuisineBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET LacuisineBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int LacuisineBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int LacuisineBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__AccessAuthentication(struct soap*, LacuisineBindingService*);
static int serve___ns1__OpenUserSession(struct soap*, LacuisineBindingService*);

int LacuisineBindingService::dispatch()
{	return dispatch(this->soap);
}

int LacuisineBindingService::dispatch(struct soap* soap)
{
	LacuisineBindingService_init(soap->imode, soap->omode);
	(void)soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:AccessAuthenticationRequest"))
		return serve___ns1__AccessAuthentication(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:OpenUserSessionRequest"))
		return serve___ns1__OpenUserSession(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__AccessAuthentication(struct soap *soap, LacuisineBindingService *service)
{	struct __ns1__AccessAuthentication soap_tmp___ns1__AccessAuthentication;
	ns1__AccessAuthenticationResponseType ns1__AccessAuthenticationResponse;
	ns1__AccessAuthenticationResponse.soap_default(soap);
	soap_default___ns1__AccessAuthentication(soap, &soap_tmp___ns1__AccessAuthentication);
	if (!soap_get___ns1__AccessAuthentication(soap, &soap_tmp___ns1__AccessAuthentication, "-ns1:AccessAuthentication", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AccessAuthentication(soap_tmp___ns1__AccessAuthentication.ns1__AccessAuthenticationRequest, ns1__AccessAuthenticationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__AccessAuthenticationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__AccessAuthenticationResponse.soap_put(soap, "ns1:AccessAuthenticationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__AccessAuthenticationResponse.soap_put(soap, "ns1:AccessAuthenticationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__OpenUserSession(struct soap *soap, LacuisineBindingService *service)
{	struct __ns1__OpenUserSession soap_tmp___ns1__OpenUserSession;
	ns1__OpenUserSessionResponse ns1__OpenUserSessionResponse_;
	ns1__OpenUserSessionResponse_.soap_default(soap);
	soap_default___ns1__OpenUserSession(soap, &soap_tmp___ns1__OpenUserSession);
	if (!soap_get___ns1__OpenUserSession(soap, &soap_tmp___ns1__OpenUserSession, "-ns1:OpenUserSession", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->OpenUserSession(soap_tmp___ns1__OpenUserSession.ns1__OpenUserSessionRequest_, ns1__OpenUserSessionResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__OpenUserSessionResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__OpenUserSessionResponse_.soap_put(soap, "ns1:OpenUserSessionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__OpenUserSessionResponse_.soap_put(soap, "ns1:OpenUserSessionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
